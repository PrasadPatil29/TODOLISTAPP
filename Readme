Sure! Here's the full README.md content you can directly copy and paste into your project:

---

markdown
# 📝 JWT-Protected TODO App (Node.js + Express + MongoDB)

A full-featured backend API for a TODO application with user authentication using **JWT**, request validation using **Zod**, and MongoDB for persistence via **Mongoose**.

---

## 🔧 Tech Stack

- **Node.js**
- **Express.js**
- **MongoDB**
- **Mongoose**
- **Zod** (for schema validation)
- **JWT** (for user authentication)
- **bcrypt** (for password hashing)
- **dotenv** (for managing environment variables)

---

## 📦 Features

- User **Signup** and **Signin**
- JWT-based **Authentication**
- Zod-based **Input Validation**
- CRUD operations for TODOs (Create, Read, Update, Delete)
- Middleware for **authentication** and **validation**
- Users can only manage their **own TODOs**

---

## 📁 Folder Structure (Suggestion)



project-root/
│
├── controllers/
│   ├── authController.js
│   └── todoController.js
│
├── models/
│   ├── User.js
│   └── Todo.js
│
├── middlewares/
│   ├── authMiddleware.js
│   └── validateMiddleware.js
│
├── routes/
│   ├── authRoutes.js
│   └── todoRoutes.js
│
├── schemas/
│   ├── authSchemas.js
│   └── todoSchemas.js
│
├── .env
├── app.js
└── package.json

`

---

## 🧑‍💻 API Endpoints

### 🔐 Auth Routes

#### POST `/signup`
- **Purpose**: Register new user
- **Body (Zod Validated)**:
json
{
  "username": "omkar",
  "email": "omkar@example.com",
  "password": "12345678"
}
`

* **Response**: JWT token

---

#### POST `/signin`

* **Purpose**: Login user
* **Body (Zod Validated)**:

json
{
  "email": "omkar@example.com",
  "password": "12345678"
}


* **Response**: JWT token

---

### 📋 TODO Routes (All Protected)

All these routes require JWT in headers:
`Authorization: Bearer <token>`

#### POST `/todos`

* **Purpose**: Create new TODO
* **Body (Zod Validated)**:

json
{
  "title": "Learn Zod",
  "description": "Understand schema validation",
  "status": "pending"
}


---

#### GET `/todos`

* **Purpose**: Get all TODOs for logged-in user

---

#### GET `/todos/:id`

* **Purpose**: Get single TODO by ID
* **Params**: `id` (MongoDB ObjectId)

---

#### PUT `/todos/:id`

* **Purpose**: Update a TODO
* **Body (Zod Validated)**:

json
{
  "title": "Learn Zod",
  "description": "Updated description",
  "status": "completed"
}


---

#### DELETE `/todos/:id`

* **Purpose**: Delete a TODO by ID

---

## 🔐 Middleware

### `authMiddleware.js`

* Extracts JWT from `Authorization` header
* Verifies token
* Appends `req.user = { userId, email }`
* Rejects unauthorized requests

### `validateMiddleware.js`

* Accepts a Zod schema
* Validates `req.body`
* Sends 400 if invalid

---

## 📄 Environment Variables (.env)

env
PORT=5000
MONGODB_URL=mongodb+srv://<username>:<password>@cluster.mongodb.net/todos
JWT_SECRET=your_jwt_secret


---

## ✅ Run Instructions

bash
npm install
npm run dev


---

## 📌 Notes

* Passwords are hashed using bcrypt before storing
* JWT tokens expire after a defined time (optional)
* Only the owner of a TODO can edit/delete it
* You can extend this app with:

  * Pagination
  * Filtering (by status)
  * Refresh tokens

---

## ✍ Author

Made with Prasad



Let me know if you want a working starter codebase for this too.
```